{"version":3,"sources":["context/TokenContext.js","hooks/Wallet.js","hooks/Network.js","hooks/SMTToken.js","hooks/ContractFactory.js","hooks/connectors.js","utils/shortenAddress.js","hooks/WalletConnect.js","components/Header.js","hooks/Transaction.js","components/Swap.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["initialContext","ethBalance","setEthBalance","SMTTokenBalance","setSMTTokenBalance","exchangeRate","setExchangeRate","isWalletConnectionModalOpen","setWalletConnectModal","txnStatus","setTxnStatus","appReducer","state","type","payload","isWalletConnectModalOpen","TokenContext","createContext","useTokenContext","React","useContext","AppContextProvider","children","useReducer","store","dispatch","contextValue","balance","rate","open","status","Provider","value","Wallet","useWeb3React","active","library","account","fetchEthBalance","a","getBalance","convertedBal","parseFloat","formatEther","toPrecision","supportedCompNetworks","Network","chainId","isValidNetwork","useMemo","includes","SMTToken","SMTTokenContract","contractAddress","ABI","AddressZero","Error","signerOrProvider","getSigner","connectUnchecked","Contract","ContractFactory","TOKEN_ADDRESS","SMT_TOKEN_JSON","abi","fetchSMTTokenBalance","balanceOf","formatUnits","fetchSMTTokenExchangeRate","callStatic","getExchangeRate","Math","pow","console","log","deposit","amount","mint","from","parseEther","txn","wait","useEffect","injected","InjectedConnector","supportedChainIds","shortenAddress","address","num","substring","length","WalletButton","activate","deactivate","className","style","width","Button","onClick","Header","Container","Card","textAlign","WalletConnect","Row","Col","Transaction","Swap","useState","depositAmount","setDepositAmount","convertedAmount","Number","toFixed","show","Spinner","animation","role","block","center","onChange","e","target","readOnly","disabled","Home","getLibrary","provider","ethers","providers","Web3Provider","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63fb0140.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\r\n\r\nconst initialContext = {\r\n  ethBalance: 'Na',\r\n  setEthBalance: () => {},\r\n  SMTTokenBalance: 'Na',\r\n  setSMTTokenBalance: () => {},\r\n  exchangeRate: 'Na',\r\n  setExchangeRate: () => {},\r\n  isWalletConnectionModalOpen: false,\r\n  setWalletConnectModal: () => {},\r\n  txnStatus: 'NOT_SUBMITTED',\r\n  setTxnStatus: () => {},\r\n};\r\n\r\nconst appReducer = (state, { type, payload }) => \r\n{\r\n\r\n  switch (type) \r\n  {\r\n    case 'SET_ETH_BALANCE':\r\n      return {\r\n        ...state,\r\n        ethBalance: payload,\r\n      };\r\n\r\n    case 'SET_SMT_TOKEN_BALANCE':\r\n      return {\r\n        ...state,\r\n        SMTTokenBalance: payload,\r\n      };\r\n\r\n    case 'SET_EXCHANGE_RATE':\r\n      return {\r\n        ...state,\r\n        exchangeRate: payload,\r\n      };\r\n\r\n    case 'SET_WALLET_MODAL':\r\n      return {\r\n        ...state,\r\n        isWalletConnectModalOpen: payload,\r\n      };\r\n\r\n    case 'SET_TXN_STATUS':\r\n      return {\r\n        ...state,\r\n        txnStatus: payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst TokenContext = createContext(initialContext);\r\nexport const useTokenContext = () => React.useContext(TokenContext);\r\n\r\nexport const AppContextProvider = ({ children }) => \r\n{\r\n  const [store, dispatch] = useReducer(appReducer, initialContext); \r\n\r\n  const contextValue = {\r\n    \r\n    ethBalance: store.ethBalance,\r\n    \r\n    setEthBalance: (balance) => {      \r\n      dispatch({ type: 'SET_ETH_BALANCE', payload: balance });\r\n    },\r\n    \r\n    SMTTokenBalance: store.SMTTokenBalance,\r\n    \r\n    setSMTTokenBalance: (balance) => {\r\n      \r\n      dispatch({ type: 'SET_SMT_TOKEN_BALANCE', payload: balance });\r\n    },\r\n    \r\n    exchangeRate: store.exchangeRate,\r\n    \r\n    setExchangeRate: (rate) => {\r\n      \r\n      dispatch({ type: 'SET_EXCHANGE_RATE', payload: rate });\r\n    },\r\n    \r\n    isWalletConnectModalOpen: store.isWalletConnectModalOpen,\r\n    \r\n    setWalletConnectModal: (open) => {\r\n      \r\n      dispatch({ type: 'SET_WALLET_MODAL', payload: open });\r\n    },\r\n    txnStatus: store.txnStatus,\r\n\r\n    setTxnStatus: (status) => {\r\n      \r\n      dispatch({ type: 'SET_TXN_STATUS', payload: status });\r\n    },\r\n\r\n  };\r\n\r\n  return <TokenContext.Provider value={contextValue}>{children}</TokenContext.Provider>;\r\n};\r\n","import { useWeb3React } from '@web3-react/core';\nimport { formatEther } from '@ethersproject/units';\nimport { useTokenContext } from '../context/TokenContext';\n\nconst Wallet = () => {  \n  \n  const { active, library, account } = useWeb3React();\n  const { ethBalance, setEthBalance } = useTokenContext();\n\n  const fetchEthBalance = async () => {     \n    \n    if (library && active && account) \n    { \n      const balance = await library.getBalance(account);\n      var convertedBal = parseFloat(formatEther(balance)).toPrecision(4);      \n      setEthBalance(convertedBal);\n    } \n    else \n    {\n      setEthBalance('Not Initialized');\n    }\n  };\n\n  return { ethBalance, fetchEthBalance };\n};\n\nexport default Wallet;\n","import { useMemo } from 'react';\nimport { useWeb3React } from '@web3-react/core';\n\nconst supportedCompNetworks = [4];\n\nfunction Network() {  \n    \n  const { chainId } = useWeb3React();\n\n  const isValidCompNetwork = useMemo(() => {\n\n    return supportedCompNetworks.includes(chainId);\n\n  }, [chainId]);\n\n  return { isValidNetwork: isValidCompNetwork };\n}\n\nexport default Network;\n","import { ContractFactory } from './ContractFactory';\nimport SMT_TOKEN_JSON from '../artifacts/contracts/SMT.sol/SMT.json';\nimport TOKEN_ADDRESS from '../artifacts/contracts/config.json';\nimport Network from './Network';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTokenContext } from '../context/TokenContext';\nimport { formatUnits, parseEther } from '@ethersproject/units';\nimport { useEffect } from 'react';\n\nexport const SMTToken = () => {    \n\n  const { account } = useWeb3React();\n  \n  const { isValidNetwork } = Network();\n  \n  const SMTTokenContractAddress = TOKEN_ADDRESS; \n\n  const SMTTokenContract = ContractFactory(SMTTokenContractAddress, SMT_TOKEN_JSON.abi);\n\n  const { setSMTTokenBalance, setExchangeRate, setTxnStatus, SMTTokenBalance, exchangeRate } = useTokenContext();\n\n  const fetchSMTTokenBalance = async () => \n  { \n    const SMTTokenBalance = await SMTTokenContract.balanceOf(account);\n    setSMTTokenBalance(formatUnits(SMTTokenBalance, 18));\n  };\n\n  const fetchSMTTokenExchangeRate = async () => {\n    \n    try {\n      debugger;\n      var rate = await SMTTokenContract.callStatic.getExchangeRate();\n      rate = formatUnits(rate, 0) / Math.pow(10, 18)      \n      return setExchangeRate(rate);\n    } \n    \n    catch (error) \n    {\n      console.log(error);\n      debugger;\n    }\n  };\n\n  const deposit = async (amount) => {\n\n    \n\n    if (account)// && isValidNetwork) \n    {    \n      try \n      {\n        setTxnStatus('LOADING');\n        \n        const txn = await SMTTokenContract.mint({\n          from: account,\n          value: parseEther(amount),\n        });\n     \n        await txn.wait(1);\n        \n        await fetchSMTTokenBalance();\n     \n        setTxnStatus('COMPLETE');\n\n      } \n      \n      catch (error) \n      {\n        \n        setTxnStatus('ERROR');\n      }\n    }\n  };\n\n  useEffect(() => \n  {\n    if (account) \n    {\n      fetchSMTTokenExchangeRate();\n    }\n  }, [account]);\n\n  return {\n    SMTTokenBalance,\n    exchangeRate,\n    fetchSMTTokenExchangeRate,\n    fetchSMTTokenBalance,\n    deposit,\n  };\n};\n","import { useMemo } from 'react';\nimport { Contract } from '@ethersproject/contracts';\nimport { AddressZero } from '@ethersproject/constants';\nimport { useWeb3React } from '@web3-react/core';\n\nexport function ContractFactory(contractAddress, ABI) \n{\n\n  if (contractAddress === AddressZero) {\n    throw Error(`Invalid 'contractAddress' parameter '${contractAddress}'.`);\n  }\n\n  const { library, account } = useWeb3React();\n\n  const signerOrProvider = account ? library.getSigner(account).connectUnchecked() : library;\n  \n  return useMemo(() => \n  {\n    return new Contract(contractAddress, ABI, signerOrProvider);\n  }, [contractAddress, ABI, signerOrProvider]);\n}\n","import { InjectedConnector } from '@web3-react/injected-connector';\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 42, 31337] });\n","export const shortenAddress = (address, num = 3) => {\n  if (!address) return '';\n  return !!address && `${address.substring(0, num + 2)}...${address.substring(address.length - num - 1)}`;\n};\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { injected } from '../hooks/connectors';\r\nimport { shortenAddress } from '../utils/shortenAddress';\r\n\r\n\r\nconst WalletButton = () => {\r\n  const { activate, active, account, deactivate } = useWeb3React();\r\n\r\n  if (active) \r\n  {\r\n    \r\n    return (\r\n      <div className=\"d-flex flex-row justify-content-between\" style={{ width: 350 }}>        \r\n        <div className=\"mx-4\">\r\n          {shortenAddress(account)}\r\n        </div>\r\n        <Button onClick={deactivate}>Log Out</Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>      \r\n      <div className=\"mx-2\">\r\n        Metamask\r\n      </div>      \r\n      <Button onClick={() => activate(injected)}>Connect</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WalletButton;\r\n","import React, { useEffect } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport Wallet from \"../hooks/Wallet\";\nimport { SMTToken } from \"../hooks/SMTToken\";\nimport WalletConnect from \"../hooks/WalletConnect\";\nimport {\n  Row,\n  Container,\n  Col,\n  Breadcrumb,\n  Card,\n  Button,\n  ListGroup,\n  ListGroupItem,\n} from \"react-bootstrap\";\n\nconst Header = () => {\n  const { account } = useWeb3React();\n  const { fetchEthBalance, ethBalance } = Wallet();\n  const {\n    fetchSMTTokenBalance,\n    fetchSMTTokenExchangeRate,\n    SMTTokenBalance,\n    exchangeRate,\n  } = SMTToken();\n\n  useEffect(() => {\n    if (account) {\n      debugger;\n      fetchEthBalance();\n      fetchSMTTokenBalance();\n      fetchSMTTokenExchangeRate();\n    }\n  }, [account]);\n\n  return (\n    <Container>    \n      <Card className=\"mb-15\" style={{ textAlign:'center' }}>\n        <WalletConnect />\n      </Card>\n\n      <Card>\n        <Row className=\"mx-auto my-2\">\n          <Col>\n            ETH balance: {ethBalance}\n          </Col>\n          <Col>\n            SMT balance: {SMTTokenBalance}\n          </Col>\n          <Col>\n            SMT Exchange Rate: {exchangeRate}\n          </Col>\n        </Row>\n      </Card>    \n    </Container>\n  );\n};\n\nexport default Header;\n","import { useTokenContext } from '../context/TokenContext';\n\nconst Transaction = () => {\n  \n  const { setTxnStatus, txnStatus } = useTokenContext();  \n\n  return { setTxnStatus, txnStatus };\n};\n\nexport default Transaction;\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { SMTToken } from \"../hooks/SMTToken\";\r\nimport { TokenContext } from \"../context/TokenContext\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Wallet from \"../hooks/Wallet\";\r\nimport Transaction from \"../hooks/Transaction\";\r\nimport { Card, Button, Row, Col } from \"react-bootstrap\";\r\n\r\nconst Swap = () => {\r\n  const [depositAmount, setDepositAmount] = useState(0);\r\n\r\n  const { deposit, SMTTokenBalance, exchangeRate } = SMTToken();\r\n\r\n  const { ethBalance } = Wallet();\r\n\r\n  const { txnStatus, setTxnStatus } = Transaction();\r\n\r\n  const handleDepositSubmit = () => deposit(depositAmount);\r\n\r\n  const convertedAmount = useMemo(\r\n    () => Number(depositAmount * exchangeRate).toFixed(4),\r\n    [depositAmount, exchangeRate]\r\n  );\r\n\r\n  console.log(exchangeRate);\r\n\r\n  if (txnStatus === \"LOADING\") {\r\n    return (\r\n      <Container show>\r\n        <div>\r\n          <Spinner animation=\"border\" role=\"status\" className=\"m-auto\" />\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (txnStatus === \"COMPLETE\") {\r\n    return (\r\n      <Container show>\r\n        <div>\r\n          <div block center className=\"mb-5\">\r\n            Txn Was successful!\r\n          </div>\r\n          <Button onClick={() => setTxnStatus(\"NOT_SUBMITTED\")}>Go Back</Button>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (txnStatus === \"ERROR\") {\r\n    return (\r\n      <Container show>\r\n        <div>\r\n          <div>Txn ERROR</div>\r\n          <Button onClick={() => setTxnStatus(\"NOT_SUBMITTED\")}>Go Back</Button>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    \r\n    <Card>      \r\n      <div className=\"mb-3\">Deposit</div>\r\n\r\n      <Row>\r\n        <Col>\r\n          ETH{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            onChange={(e) => setDepositAmount(e.target.value)}\r\n          />\r\n        </Col>\r\n        SMT\r\n        <Col>\r\n          <input type=\"number\" readOnly value={convertedAmount} />\r\n        </Col>\r\n        <Col>\r\n          <Button disabled={depositAmount <= 0} onClick={handleDepositSubmit}>\r\n            Deposit {depositAmount} ETH\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Swap;\r\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Swap from '../components/Swap';\nconst Home = () => {\n\n  return (\n    <Container className=\"mt-5\">\n      <Swap></Swap>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { ethers } from \"ethers\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { AppContextProvider } from \"./context/TokenContext\";\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction getLibrary(provider) {\n  return new ethers.providers.Web3Provider(provider);\n}\n\nfunction App() {\n  return (\n    <AppContextProvider>\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <div>          \n          <Header />\n          <Router>\n            <Route exact path=\"/\" component={Home} />\n          </Router>\n        </div>\n      </Web3ReactProvider>\n    </AppContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-bootstrap/dist/react-bootstrap.min.js\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}